export module fraction;

import <ratio>;
import <cstdint>;
import <numeric>;
import <concepts>;
import <iostream>;
import <algorithm>;

/*
frt::fraction::fraction(a,b) requires a and b have the same type
 */

export namespace frt{
	template<std::signed_integral integer>
	class fraction{
	public:
		integer numerator,denominator;

		bool simple()const{
			return std::gcd(numerator,denominator)==1 and denominator>0;
		}

		fraction reduce()const{
			auto f=*this;
			if(f.simple())return f;
			if(f.numerator==0){
				f.denominator=1;
				return f;
			}
			auto Gcd=std::gcd(f.numerator,f.denominator);
			f.numerator/=Gcd;
			f.denominator/=Gcd;
			bool negative=(f.numerator<0)^(f.denominator<0);
			f.numerator=std::abs(f.numerator);
			f.denominator=std::abs(f.denominator);
			if(negative)f.numerator*=-1;
			return std::move(f);
		}
	private:
		std::pair<fraction,fraction> pass(const fraction& f)const{
			if(denominator==f.denominator)return std::make_pair(*this,f);
			auto tthis=reduce();
			auto tf=f.reduce();
			auto Gcd=std::gcd(tthis.denominator,tf.denominator);
			auto publicDe=tthis.denominator*tf.denominator/Gcd;
			tthis.numerator*=tf.denominator/Gcd;
			tf.numerator*=tthis.denominator/Gcd;
			tthis.denominator=tf.denominator=publicDe;
			return {tthis,tf};
		}
	public:
		fraction():numerator(0),denominator(1){}

		explicit fraction(const integer& Nu,const integer& De):numerator(Nu),denominator(De){}

		fraction(const integer& Num):numerator(Num),denominator(1){}

		fraction(integer&& Num):numerator(Num),denominator(1){Num=0;}

		template<std::signed_integral T>
		requires std::constructible_from<integer,T>
		fraction(const fraction<T>& f):numerator(f.dividend()),denominator(f.divisor()){}

		template<intmax_t num,intmax_t den>
		fraction(const std::ratio<num,den>& r):numerator(num),denominator(den){
			if(not simple())*this=reduce();
		}

		integer divisor/*denominator*/()const{const auto& f=simple()?reduce():*this;return f.denominator;}

		integer dividend/*numerator*/()const{const auto& f=simple()?reduce():*this;return f.numerator;}

		bool positive()const{auto f=simple()?reduce():*this;return f.numerator>0;}

		template<std::signed_integral T>
		requires std::constructible_from<integer,T>
		fraction& operator=(const fraction<T>& f){
			const auto& tmp=f.simple()?f.reduce():f;
			numerator=tmp.numerator;
			denominator=tmp.denominator;
			return *this;
		}

		template<std::signed_integral T>
		requires std::constructible_from<integer,T>
		fraction& operator=(fraction<T>&& f){
			const auto& tmp=f.simple()?f.reduce():f;
			numerator=tmp.numerator;
			denominator=tmp.denominator;
			f.numerator=0;
			f.denominator=1;
			return *this;
		}

		template<std::signed_integral Int>
		requires std::constructible_from<integer,Int>
		fraction& operator=(const Int& i){
			numerator=i;
			denominator=1;
			return *this;
		}

		template<std::signed_integral Int>
		requires std::constructible_from<integer,Int>
		fraction& operator=(Int&& i){
			numerator=i;
			denominator=1;
			i=0;
			return *this;
		}

		bool operator==(const fraction& f)const{
			const auto& tthis=simple()?reduce():*this;
			const auto& tf=f.simple()?f.reduce():f;
			return tthis.numerator==tf.numerator and tthis.denominator==tf.denominator;
		}

		bool operator!=(const fraction& f)const{
			return not *this==f;
		}

		bool operator>(const fraction& f)const{
			auto pair=pass(f);//Because there has been 'reduce();f.reduce();' in function 'pass(f)', so there is no need to write it.
			return pair.first.numerator>pair.second.numerator;
		}

		bool operator>=(const fraction& f)const{
			auto pair=pass(f);
			return pair.first.numerator>=pair.second.numerator;
		}

		bool operator<=(const fraction& f)const{
			return not *this>f;
		}

		bool operator<(const fraction& f)const{
			return not *this>=f;
		}

		fraction operator+(const fraction& f)const{
			auto [lhs,rhs]=pass(f);//Because there has been 'reduce();f.reduce();' in function 'pass(f)', so there is no need to write it.
			fraction result(lhs.numerator+rhs.numerator,lhs.denominator/*both lhs and rhs are OK here*/);
			return std::move(result.simple()?result.reduce():result);
		}

		fraction operator-(const fraction& f)const{
			auto [lhs,rhs]=pass(f);
			fraction result(lhs.numerator-rhs.numerator,lhs.denominator);
			return std::move(result.simple()?result.reduce():result);
		}

		fraction operator*(const fraction& f)const{
			const auto& tthis=simple()?reduce():*this;
			const auto& tf=f.simple()?f.reduce():f;
			fraction result(tthis.numerator*tf.numerator,tthis.denominator*tf.denominator);
			return std::move(result.simple()?result.reduce():result);
		}

		fraction operator/(const fraction& f)const{
			const auto& tthis=simple()?reduce():*this;
			const auto& tf=f.simple()?f.reduce():f;
			fraction result(tthis.numerator*tf.denominator,tthis.denominator*tf.numerator);
			return std::move(result.simple()?result.reduce():result);
		}

		fraction& operator+=(const fraction& f){
			return *this=*this+f;
		}

		fraction& operator-=(const fraction& f){
			return *this=*this-f;
		}

		fraction& operator*=(const fraction& f){
			return *this=*this*f;
		}

		fraction& operator/=(const fraction& f){
			return *this=*this/f;
		}

		template<std::floating_point real>
		operator real()const{
			return ((real)dividend())/divisor();
		}

		template<std::signed_integral Integer>
		friend void reduce(fraction<Integer>& f);
	};

	template<std::signed_integral Integer>
	void reduce(fraction<Integer>& f){
		if(not f.simple())f=f.reduce();
	}

	fraction() -> fraction<int32_t>;

	template<typename T>
	fraction(const T&,const T&) -> fraction<T>;

	template<typename T>
	fraction(const T&) -> fraction<T>;

	template<typename T>
	fraction(T&&,T&&) -> fraction<T>;

	template<typename T>
	fraction(T&&) -> fraction<T>;
}

export
template<typename integer>
std::ostream& operator<<(std::ostream& out,frt::fraction<integer> f){
	frt::reduce(f);
	if(f.divisor()==1){
		out<<f.dividend();
		return out;
	}
	if(not f.positive())out<<"-";
	out<<std::abs(f.dividend())<<'/'<<std::abs(f.divisor());
	return out;
}
