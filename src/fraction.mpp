export module fraction;

import <ratio>;
import <cstdint>;
import <numeric>;
import <concepts>;
import <iostream>;
import <algorithm>;

/*
frt::fraction::fraction(a,b) requires a and b have the same type
 */

export namespace frt{
	template<std::signed_integral integer>
	class fraction{
	private:
		integer numerator,denominator;
	private:
		fraction reduce()const{
			auto f=*this;
			if(f.numerator==1 or f.denominator==1)return f;
			if(f.numerator==0){
				f.denominator=1;
				return f;
			}
			auto Gcd=std::gcd(f.numerator,f.denominator);
			f.numerator/=Gcd;
			f.denominator/=Gcd;
			bool negative=(f.numerator<0)^(f.denominator<0);
			f.numerator=std::abs(f.numerator);
			f.denominator=std::abs(f.denominator);
			if(negative)f.numerator*=-1;
			return f;
		}

		std::pair<fraction,fraction> pass(const fraction& f)const{
			if(denominator==f.denominator)return std::make_pair(*this,f);
			auto tthis=reduce();
			auto tf=f.reduce();
			auto Gcd=std::gcd(tthis.denominator,tf.denominator);
			auto publicDe=tthis.denominator*tf.denominator/Gcd;
			tthis.numerator*=tf.denominator/Gcd;
			tf.numerator*=tthis.denominator/Gcd;
			tthis.denominator=tf.denominator=publicDe;
			return std::make_pair(tthis,tf);
		}
	public:
		fraction():numerator(0),denominator(1){}

		fraction(const integer& Nu,const integer& De):numerator(Nu),denominator(De){}

		fraction(const integer& Num):numerator(Num),denominator(1){}

		template<intmax_t num,intmax_t den>
		fraction(const std::ratio<num,den>& r):numerator(num),denominator(den){}

		integer divisor/*denominator*/()const{auto f=reduce();return f.denominator;}

		integer dividend/*numerator*/()const{auto f=reduce();return f.numerator;}

		bool positive()const{auto f=reduce();return f.numerator>0;}

		fraction& operator=(const fraction& f){
			numerator=f.numerator;
			denominator=f.denominator;
			*this=reduce();
			return *this;
		}

		fraction& operator=(const integer& i){
			numerator=i;
			denominator=1;
			return *this;
		}

		bool operator==(const fraction& f)const{
			auto tthis=reduce();
			auto tf=f.reduce();
			return tthis.numerator==tf.numerator and tthis.denominator==tf.denominator;
		}

		bool operator!=(const fraction& f)const{
			return not *this==f;
		}

		bool operator>(const fraction& f)const{
			auto pair=pass(f);//Because there has been 'reduce();f.reduce();' in function 'pass(f)', so there is no need to write it.
			return pair.first.numerator>pair.second.numerator;
		}

		bool operator>=(const fraction& f)const{
			auto pair=pass(f);
			return pair.first.numerator>=pair.second.numerator;
		}

		bool operator<=(const fraction& f)const{
			return not *this>f;
		}

		bool operator<(const fraction& f)const{
			return not *this>=f;
		}

		fraction operator+(const fraction& f)const{
			auto pair=pass(f);//Because there has been 'reduce();f.reduce();' in function 'pass(f)', so there is no need to write it.
			fraction result(pair.first.numerator+pair.second.numerator,pair.first.denominator);
			return result.reduce();
		}

		fraction operator-(const fraction& f)const{
			auto pair=pass(f);
			fraction result(pair.first.numerator-pair.second.numerator,pair.first.denominator);
			return result.reduce();
		}

		fraction operator*(const fraction& f)const{
			auto tthis=reduce();
			auto tf=f.reduce();
			fraction result(tthis.numerator*tf.numerator,tthis.denominator*tf.denominator);
			return result.reduce();
		}

		fraction operator/(const fraction& f)const{
			auto tthis=reduce();
			auto tf=f.reduce();
			fraction result(tthis.numerator*tf.denominator,tthis.denominator*tf.numerator);
			return result.reduce();
		}

		operator long double()const{
			return ((long double)dividend())/divisor();
		}

		template<typename Integer>
		friend void reduce(fraction<Integer>& f);
	};

	template<typename Integer>
	void reduce(fraction<Integer>& f){
		f=f.reduce();
	}

	fraction() -> fraction<int32_t>;

	template<typename T>
	fraction(const T&,const T&) -> fraction<T>;

	template<typename T>
	fraction(const T&) -> fraction<T>;
}

export
template<typename integer>
std::ostream& operator<<(std::ostream& out,const frt::fraction<integer>& f){
	if(f.divisor()==1){
		out<<f.dividend();
		return out;
	}
	if(not f.positive())out<<"-";
	out<<f.dividend()<<'/'<<f.divisor();
	return out;
}
